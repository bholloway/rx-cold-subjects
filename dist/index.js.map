{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 02f064d7d8cc0eeaa933","webpack:///./index.js","webpack:///./utility/subclass-with.js","webpack:///external \"Rx\"","webpack:///./operator/behavior.js","webpack:///./operator/disposable.js","webpack:///./operator/lifecycle.js","webpack:///./operator/to-observable.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;;;;AChBA;;AAEA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;;;;ACnCA,gD;;;;;;;;;ACAA;;AAEA;AACA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,UAAU;AACrB,cAAa,WAAW;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,kBAAiB,aAAa;AAC9B,kBAAiB,kBAAkB;AACnC,kBAAiB;AACjB,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mC;;;;;;;;;ACjEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA,qBAAoB,eAAe;AACnC,qBAAoB,qBAAqB;AACzC,qBAAoB;AACpB,IAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qC;;;;;;;;;ACnDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,WAAW;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oC;;;;;;;;;ACpEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uC","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Rx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"Rx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"rxOperators\"] = factory(require(\"Rx\"));\n\telse\n\t\troot[\"rxOperators\"] = factory(root[\"Rx\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 02f064d7d8cc0eeaa933\n **/","/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nmodule.exports = {\n  utilty  : {\n    subclassWith: require('./utility/subclass-with')\n  },\n  operator: {\n    behavior    : require('./operator/behavior'),\n    disposable  : require('./operator/disposable'),\n    lifecycle   : require('./operator/lifecycle'),\n    toObservable: require('./operator/to-observable')\n  }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar Operator = require('rxjs').Operator;\n\n/**\n * Create a subclass of `Rx.Operator` that includes the given operators.\n * @param {object} operators A hash of operator functions\n * @returns {class} A subclass that includes the given operators\n */\nfunction subclassWith(operators) {\n  var Subclass = function Subclass() {\n    Operator.apply(this, Array.prototype.slice.call(arguments));\n  };\n\n  Subclass.prototype = Object.create(Operator);\n  Subclass.prototype.constructor = Operator;\n  Subclass.prototype.lift = lift;\n\n  for (var key in operators) {\n    if (operators.hasOwnProperty(key)) {\n      Subclass.prototype[key] = operators[key];\n    }\n  }\n\n  return Subclass;\n\n  function lift(operator) {\n    /* jshint: validthis */\n    var observable = new Subclass();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n}\n\nmodule.exports = subclassWith;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./utility/subclass-with.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"Rx\"\n ** module id = 3\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Represents a value that changes over time. Observers can subscribe to the subject to receive the last (or initial)\n * value and all subsequent notifications, unless or until the source Observable is complete.\n *\n * @param {*} [initialValue] Optional value to use when invalid (defaults to `undefined`)\n * @param {Scheduler} [scheduler] Optional scheduler for internal use\n * @returns {Observable} An observable with additional `clear()` method and `isValid:boolean` field\n */\nfunction behaviorOperator(initialValue, scheduler) {\n  var currentValue,\n      isDisposed;\n\n  // shared by all subscribers\n  var sourceObs = this.do(store, undefined, dispose);\n\n  var clearObserver,\n      clearObs = Rx.Observable.create(function (observer) {\n        clearObserver = observer;\n      });\n\n  var sharedObs = Rx.Observable.merge(sourceObs, clearObs);\n\n  // factory an observable for each subscriber\n  var result = Rx.Observable.defer(function () {\n    return isDisposed ?\n      Rx.Observable.empty() :\n      Rx.Observable.merge(Rx.Observable.of(currentValue || initialValue), sharedObs);\n  });\n\n  // composition\n  return Object.defineProperties(result, {\n    clear     : {value: clear},\n    getIsValid: {value: getIsValid},\n    isValid   : {get: getIsValid}\n  });\n\n  function store(value) {\n    currentValue = value;\n  }\n\n  function clear() {\n    currentValue = undefined;\n    clearObserver.next(initialValue);\n  }\n\n  function dispose() {\n    if (!isDisposed) {\n      isDisposed = true;\n      currentValue = null;\n      clearObserver.complete();\n\n      sourceObs = null;\n      clearObserver = clearObs = null;\n      sharedObs = null;\n      result = null;\n    }\n  }\n\n  function getIsValid() {\n    return !isDisposed && (currentValue !== initialValue);\n  }\n}\n\nmodule.exports = behaviorOperator;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./operator/behavior.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Represents a value that changes over time. Observers can subscribe to the subject to receive all subsequent\n * notifications, unless or until the source Observable is complete or the Subject is disposed.\n *\n * This Subject introduces a complete that will cause following operators in the observable chain to also complete,\n * and any disposal lifecycle hooks (i.e. `.using()`) will fire. There is some duplication with the `takeUntil()`\n * operator which you should consider as an alternative. This Subject is more convenient in the case where where you\n * want to terminate by simple function call, rather than an observable.\n *\n * @param [scheduler] Optional scheduler for internal use\n * @returns An observable with additional `dispose()` method and `isComplete:boolean` field\n */\nfunction disposableOperator(scheduler) {\n  /* jshint: validthis */\n\n  // force completion on disposal\n  var isDisposed,\n      disposeObserver,\n      disposeObs = Rx.Observable.create(function (observer) {\n        disposeObserver = observer;\n      });\n\n  var result = this\n    .do(undefined, undefined, dispose)\n    .takeUntil(disposeObs);\n\n  // composition\n  return Object.defineProperties(result, {\n    dispose      : {value: dispose},\n    getIsDisposed: {value: getIsDisposed},\n    isDisposed   : {get: getIsDisposed}\n  });\n\n  function dispose() {\n    if (!isDisposed) {\n      isDisposed = true;\n      disposeObserver.next();\n      disposeObserver.complete();\n\n      disposeObserver = disposeObs = null;\n      result = null;\n    }\n  }\n\n  function getIsDisposed() {\n    return isDisposed;\n  }\n}\n\nmodule.exports = disposableOperator;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./operator/disposable.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n\nvar behaviorOperator = require('./behavior');\n\n/**\n * Represents a value that changes over time. Observers can subscribe to the subject to receive all subsequent\n * notifications, unless or until the source Observable is complete. It is possible to observe the number of\n * subscriptions to the Subject.\n *\n * @param [scheduler] Optional scheduler for internal use\n * @returns {Observable} An observable with additional `lifecycle:Observable` field\n */\nfunction lifecycleOperator(scheduler) {\n  /* jshint: validthis */\n  var isDisposed;\n\n  // reference-count lifecycle observable\n  var countObserver,\n      countObs         = Rx.Observable.create(function (observer) {\n        countObserver = observer;\n      }),\n      countBehaviorObs = behaviorOperator.call(countObs, 0);\n\n  // publish single observable for all subscribers\n  var result = this\n    .do(undefined, undefined, dispose)\n    .publish()\n    .refCount();\n\n  // composition\n  return Object.defineProperties(hookSubscribe(result), {\n    lifecycle: {value: countBehaviorObs}\n  });\n\n  function dispose() {\n    if (!isDisposed) {\n      isDisposed = true;\n      countObserver.complete();\n\n      countObserver = countObs = countBehaviorObs = null;\n      result = null;\n    }\n  }\n\n  function hookSubscribe(connectableObs) {\n    var _subscribe = connectableObs._subscribe;\n\n    connectableObs._subscribe = function subscribe(subscriber) {\n      var subscription = _subscribe.call(connectableObs, subscriber);\n      if (countObserver) {\n        countObserver.next(countable.refCount);\n      }\n\n      var _unsubscribe = subscription._unsubscribe;\n\n      subscription._unsubscribe = function unsubscribe() {\n        _unsubscribe.call(subscription);\n        if (countObserver) {\n          countObserver.next(countable.refCount - 1);\n        }\n      };\n      return subscription;\n    };\n\n    return connectableObs;\n  }\n}\n\nmodule.exports = lifecycleOperator;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./operator/lifecycle.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Transform the current Observable to an Observable with a different class implementation.\n *\n * @param subclass A subclass of `Observable` to cast the observable to\n * @returns An instance of the given class\n */\nfunction toObservableOperator(subclass) {\n  /* jshint: validthis */\n  return subclass.lift.call(this, this.operator);\n}\n\nmodule.exports = toObservableOperator;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./operator/to-observable.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}